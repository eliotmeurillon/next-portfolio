import { useState, useEffect, useRef } from "react";
import { GetServerSideProps } from "next";
import Head from "next/head";
import Image from "next/image";
import styles from "@/styles/Home.module.css";
import Switcher from "@/components/Switcher";
import Portfolio from "@/components/Portfolio";
import About from "@/components/About";
import { HiDownload } from "react-icons/hi";
import { HiOutlineMail } from "react-icons/hi";
import { FiLinkedin } from "react-icons/fi";
import Test from "@/components/Test";
import { createClient } from "@supabase/supabase-js";

export default function Home({ jsonRepos }: Props) {
  const [localStorageAvailable, setLocalStorageAvailable] = useState(false);
  const [activeTab, setActiveTab] = useState("portfolio");

  const handlePortfolioClick = () => {
    setActiveTab("portfolio");
  };

  const handleAboutClick = () => {
    setActiveTab("about");
  };

  useEffect(() => {
    setLocalStorageAvailable(!!window.localStorage);
  }, []);

  return (
    <>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <header className="fixed top-0 left-0 right-0 bg-white dark:bg-darkBlue-500 dark:text-white">
        <div className="flex justify-between items-center p-3 h-16">
          <h1 className="font-bold">EM</h1>
          {localStorageAvailable && <Switcher />}
        </div>
      </header>
      <main className="flex justify-center bg-gray-100 dark:bg-darkBlue-600 font-poppins ">
        <div className="py-[calc(1.5rem+4rem)] px-4  space-y-4 w-full md:max-w-3xl">
          <div className="flex flex-col text-left ">
            <h1 className="text-black dark:text-white text-3xl font-semibold">
              Eliot Meurillon
            </h1>
            <h2 className="text-black dark:text-white text-base font-normal">
              Développeur Full-Stack
            </h2>
          </div>
          <div className="flex flex-row justify-evenly py-3 px-3 space-x-3">
            <a
              href="/files/Eliot_Meurillon_CV_Efrei_v2.pdf"
              target="_blank"
              rel="noopener noreferrer"
              className="flex flex-row items-center h-11 px-6 space-x-2 bg-green-500 rounded-lg"
            >
              <button className="text-white">Download CV</button>
              <HiDownload color="white" />
            </a>
            <button className="h-11 px-6 bg-white rounded-lg">
              <HiOutlineMail color="rgb(34 197 94)" />
            </button>
            <button className="h-11 px-6 bg-white rounded-lg">
              <FiLinkedin color="rgb(34 197 94)" />
            </button>
          </div>
          <div className="flex flex-row justify-evenly bg-white  rounded-2xl px-3 py-3 text-green-500 dark:bg-darkBlue-500">
            <button
              className={`h-12 rounded-xl w-1/2  ${
                activeTab === "portfolio"
                  ? "bg-gray-100 dark:bg-darkBlue-600"
                  : ""
              }`}
              onClick={handlePortfolioClick}
            >
              Portfolio
            </button>
            <button
              className={`h-12 rounded-xl w-1/2 ${
                activeTab === "about" ? "bg-gray-100 dark:bg-darkBlue-600" : ""
              }`}
              onClick={handleAboutClick}
            >
              À propos
            </button>
          </div>
          {activeTab === "portfolio" && <Portfolio jsonRepos={jsonRepos} />}
          {activeTab === "about" && <About />}
        </div>
      </main>
    </>
  );
}

interface Repos {
  id: string;
  name: string;
  description?: string;
  url: string;
  updatedAt: string;
  primary_language_name?: string;
  repositoryTopics?: string[];
  illu_url: string | null;
}

interface Props {
  jsonRepos: Repos[];
}

export const getServerSideProps: GetServerSideProps<Props> = async ({
  req,
  res,
}) => {
  // set cache to last for one hour
  res.setHeader("Cache-Control", "public, max-age=3600");

  // fetch the data from Supabase
  const supabase = createClient(
    process.env.NEXT_PUBLIC_SUPABASE_URL as string,
    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY as string
  );
  const { data, error } = await supabase.from("repos").select("*");

  // convert the data to JSON format
  const jsonRepos = await JSON.parse(JSON.stringify(data));
  // console.log(jsonData);

  return {
    props: {
      jsonRepos: jsonRepos,
    },
  };
};
